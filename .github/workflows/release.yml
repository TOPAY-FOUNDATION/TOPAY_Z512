name: Release

on:
  push:
    tags:
      - 'v*'
      - 'js/v*'
      - 'go/v*'
      - 'rust/v*'

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  RUST_VERSION: 'stable'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
      is_js_release: ${{ steps.check_tag.outputs.is_js_release }}
      is_go_release: ${{ steps.check_tag.outputs.is_go_release }}
      is_rust_release: ${{ steps.check_tag.outputs.is_rust_release }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Check tag type
      id: check_tag
      run: |
        TAG_NAME="${{ steps.get_tag.outputs.tag_name }}"
        echo "is_js_release=$([[ $TAG_NAME == js/* ]] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "is_go_release=$([[ $TAG_NAME == go/* ]] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "is_rust_release=$([[ $TAG_NAME == rust/* ]] && echo true || echo false)" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        release_name: Release ${{ steps.get_tag.outputs.tag_name }}
        draft: false
        prerelease: false
        body: |
          ## TOPAY-Z512 Release ${{ steps.get_tag.outputs.tag_name }}
          
          ### What's New
          - Quantum-safe cryptographic improvements
          - Performance optimizations
          - Bug fixes and stability improvements
          
          ### Installation
          
          **JavaScript/TypeScript:**
          ```bash
          npm install @topayfoundation/topayz512
          ```
          
          **Go:**
          ```bash
          go get github.com/TOPAY-FOUNDATION/TOPAY_Z512/go@${{ steps.get_tag.outputs.tag_name }}
          ```
          
          **Rust:**
          ```bash
          cargo add topay-z512
          ```
          
          ### Documentation
          - [JavaScript/TypeScript Documentation](https://topay-foundation.github.io/TOPAY_Z512/js/)
          - [Go Documentation](https://pkg.go.dev/github.com/TOPAY-FOUNDATION/TOPAY_Z512/go)
          - [Rust Documentation](https://docs.rs/topay-z512)

  publish-js:
    name: Publish JavaScript Package
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.is_js_release == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      working-directory: ./js
      run: npm ci
    
    - name: Build package
      working-directory: ./js
      run: npm run build
    
    - name: Run tests
      working-directory: ./js
      run: npm test
    
    - name: Check if NPM_TOKEN is available
      id: check_npm_token
      run: |
        if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
          echo "npm_token_available=true" >> $GITHUB_OUTPUT
        else
          echo "npm_token_available=false" >> $GITHUB_OUTPUT
          echo "Warning: NPM_TOKEN secret is not configured. Skipping npm publish."
        fi
    
    - name: Publish to npm
      if: steps.check_npm_token.outputs.npm_token_available == 'true'
      working-directory: ./js
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create package tarball (if NPM_TOKEN not available)
      if: steps.check_npm_token.outputs.npm_token_available == 'false'
      working-directory: ./js
      run: |
        npm pack
        echo "Package created but not published due to missing NPM_TOKEN secret"

  publish-rust:
    name: Publish Rust Crate
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.is_rust_release == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Run tests
      working-directory: ./rust
      run: cargo test
    
    - name: Check if CARGO_REGISTRY_TOKEN is available
      id: check_cargo_token
      run: |
        if [ -n "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]; then
          echo "cargo_token_available=true" >> $GITHUB_OUTPUT
        else
          echo "cargo_token_available=false" >> $GITHUB_OUTPUT
          echo "Warning: CARGO_REGISTRY_TOKEN secret is not configured. Skipping crates.io publish."
        fi
    
    - name: Publish to crates.io
      if: steps.check_cargo_token.outputs.cargo_token_available == 'true'
      working-directory: ./rust
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Create package (if CARGO_REGISTRY_TOKEN not available)
      if: steps.check_cargo_token.outputs.cargo_token_available == 'false'
      working-directory: ./rust
      run: |
        cargo package
        echo "Package created but not published due to missing CARGO_REGISTRY_TOKEN secret"

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: topay-z512-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: topay-z512-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: topay-z512-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: topay-z512-macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}
    
    - name: Build binary
      working-directory: ./rust
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ./rust
      run: |
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C target/${{ matrix.target }}/release topay-z512
    
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./rust
      run: |
        7z a ${{ matrix.artifact_name }}.zip target/${{ matrix.target }}/release/topay-z512.exe
    
    - name: Upload binary (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./rust/${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload binary (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./rust/${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip