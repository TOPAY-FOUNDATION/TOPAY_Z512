name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  RUST_VERSION: 'stable'

jobs:
  # Test JavaScript/TypeScript
  test-js:
    name: Test JavaScript/TypeScript
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./js
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: js/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript compiler
      run: npm run build
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint || true
    
    - name: Check package size
      run: npm run build && du -sh dist/

  # Test Go
  test-go:
    name: Test Go
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./go
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...
    
    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run Go vet
      run: go vet ./...
    
    - name: Test examples
      run: |
        for example in examples/*/; do
          echo "Testing $example"
          cd "$example"
          go run main.go
          cd ../..
        done

  # Test Rust
  test-rust:
    name: Test Rust
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rust
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check Rust formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run benchmarks
      run: cargo bench
    
    - name: Test examples
      run: |
        for example in examples/*.rs; do
          echo "Testing $example"
          cargo run --example $(basename "$example" .rs)
        done

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Audit JavaScript dependencies
      working-directory: ./js
      run: |
        npm audit --audit-level moderate || true
    
    - name: Audit Rust dependencies
      working-directory: ./rust
      run: |
        cargo install cargo-audit
        cargo audit || true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Build and publish
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [test-js, test-go, test-rust]
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    # Publish JavaScript package
    - name: Setup Node.js for publishing
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install JS dependencies
      working-directory: ./js
      run: npm ci
    
    - name: Build JS package
      working-directory: ./js
      run: npm run build
    
    - name: Publish to npm
      working-directory: ./js
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Publish Rust crate
    - name: Setup Rust for publishing
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      working-directory: ./rust
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Documentation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Generate TypeScript docs
      working-directory: ./js
      run: |
        npm ci
        npm run docs || true
    
    - name: Generate Go docs
      working-directory: ./go
      run: |
        go doc -all . > ../docs/go-docs.md || true
    
    - name: Generate Rust docs
      working-directory: ./rust
      run: |
        cargo doc --no-deps
        cp -r target/doc ../docs/rust/ || true
    
    # Note: Documentation deployment is handled by the dedicated docs.yml workflow