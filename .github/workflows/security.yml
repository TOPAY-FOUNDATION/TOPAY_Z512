name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  RUST_VERSION: 'stable'

jobs:
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      working-directory: ./js
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./js
      run: npm audit --audit-level=moderate
    
    - name: Run npm audit fix
      working-directory: ./js
      run: npm audit fix --dry-run

  cargo-audit:
    name: Cargo Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      working-directory: ./rust
      run: cargo audit

  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    
    - name: Run gosec
      working-directory: ./go
      run: gosec ./...
    
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run govulncheck
      working-directory: ./go
      run: govulncheck ./...

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'go' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    
    - name: Setup Node.js (for JavaScript)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Build JavaScript
      if: matrix.language == 'javascript'
      working-directory: ./js
      run: |
        npm ci
        npm run build
    
    - name: Setup Go (for Go)
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build Go
      if: matrix.language == 'go'
      working-directory: ./go
      run: go build ./...
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install license-checker
      run: npm install -g license-checker
    
    - name: Check JavaScript licenses
      working-directory: ./js
      run: |
        npm ci
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Install cargo-license
      run: cargo install cargo-license
    
    - name: Check Rust licenses
      working-directory: ./rust
      run: |
        cargo license --json > licenses.json
        jq -r '.[] | select(.license | test("MIT|Apache-2.0|BSD-2-Clause|BSD-3-Clause|ISC|0BSD") | not) | .name + " has incompatible license: " + .license' licenses.json > bad_licenses.txt
        if [ -s bad_licenses.txt ]; then
          cat bad_licenses.txt
          exit 1
        fi

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified