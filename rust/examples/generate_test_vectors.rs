//! TOPAY-Z512 Test Vector Generator
//!
//! This example generates actual hash values for the test vectors in the test-vectors directory.

use std::fs::File;
use std::io::{Read, Write};
use std::path::Path;

use serde_json::{json, Value};
use topayz512::{Hash, hash_combine};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("TOPAY-Z512 Test Vector Generator\n");
    
    // Load the test vector file
    let test_vector_path = Path::new("../test-vectors/002_hash.json");
    let mut file = File::open(&test_vector_path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    
    // Parse the JSON
    let mut test_vectors: Value = serde_json::from_str(&contents)?;
    
    // Update the test vectors with actual hash values
    if let Some(hash_test_vectors) = test_vectors.get_mut("hash_test_vectors").and_then(|v| v.as_array_mut()) {
        for test_vector in hash_test_vectors {
            if let Some(test_id) = test_vector.get("test_id").and_then(|v| v.as_str()) {
                println!("Processing test vector: {}", test_id);
                
                match test_id {
                    "hash_basic_1" | "hash_basic_2" | "hash_basic_3" => {
                        if let Some(input) = test_vector.get("input").and_then(|v| v.as_str()) {
                            let hash = Hash::new(input.as_bytes());
                            test_vector["expected_output"] = json!(hash.to_hex());
                        }
                    },
                    "hash_combine_1" | "hash_combine_2" => {
                        if let (Some(input1), Some(input2)) = (
                            test_vector.get("input1").and_then(|v| v.as_str()),
                            test_vector.get("input2").and_then(|v| v.as_str())
                        ) {
                            let hash = Hash::combine(input1.as_bytes(), input2.as_bytes());
                            test_vector["expected_output"] = json!(hash.to_hex());
                        }
                    },
                    "hash_binary_1" => {
                        if let Some(input_hex) = test_vector.get("input_hex").and_then(|v| v.as_str()) {
                            // Convert hex to binary
                            let mut binary = Vec::new();
                            for i in 0..(input_hex.len() / 2) {
                                let byte = u8::from_str_radix(&input_hex[i*2..i*2+2], 16)?;
                                binary.push(byte);
                            }
                            
                            let hash = Hash::new(&binary);
                            test_vector["expected_output"] = json!(hash.to_hex());
                        }
                    },
                    _ => {
                        println!("Unknown test vector type: {}", test_id);
                    }
                }
            }
        }
    }
    
    // Update the notes
    if let Some(notes) = test_vectors.get_mut("notes").and_then(|v| v.as_array_mut()) {
        if !notes.is_empty() {
            notes[0] = json!("The expected_output values are actual SHA3-512 hash outputs generated by the Rust implementation.");
        }
    }
    
    // Write the updated test vectors back to the file
    let updated_json = serde_json::to_string_pretty(&test_vectors)?;
    let mut file = File::create(&test_vector_path)?;
    file.write_all(updated_json.as_bytes())?;
    
    println!("\nTest vectors updated successfully!");
    
    Ok(())
}