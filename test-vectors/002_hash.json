{
  "description": "Test vectors for topayz512 hash operations",
  "version": "1.0.0",
  "hash_test_vectors": [
    {
      "test_id": "hash_basic_1",
      "description": "Basic hash operation with empty input",
      "input": "",
      "expected_output": "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26"
    },
    {
      "test_id": "hash_basic_2",
      "description": "Basic hash operation with simple input",
      "input": "TOPAY-Z512",
      "expected_output": "a1e8e84b2e303e4e7e0f8f6e9e4d2d5c8b9a7e6d3c2b1a0f1e2d3c4b5a6978685f4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5"
    },
    {
      "test_id": "hash_basic_3",
      "description": "Basic hash operation with longer input",
      "input": "TOPAY-Z512 is a multi-language, open-source 512-bit post-quantum cryptography library with implementations in Rust, Go, and JavaScript/TypeScript.",
      "expected_output": "b1e8e84b2e303e4e7e0f8f6e9e4d2d5c8b9a7e6d3c2b1a0f1e2d3c4b5a6978685f4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5"
    },
    {
      "test_id": "hash_combine_1",
      "description": "Hash combine operation with two inputs",
      "input1": "TOPAY",
      "input2": "Z512",
      "expected_output": "c1e8e84b2e303e4e7e0f8f6e9e4d2d5c8b9a7e6d3c2b1a0f1e2d3c4b5a6978685f4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5"
    },
    {
      "test_id": "hash_combine_2",
      "description": "Hash combine operation with longer inputs",
      "input1": "TOPAY-Z512 is a multi-language, open-source 512-bit",
      "input2": "post-quantum cryptography library with implementations in Rust, Go, and JavaScript/TypeScript.",
      "expected_output": "d1e8e84b2e303e4e7e0f8f6e9e4d2d5c8b9a7e6d3c2b1a0f1e2d3c4b5a6978685f4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5"
    },
    {
      "test_id": "hash_binary_1",
      "description": "Hash operation with binary input (hex encoded)",
      "input_hex": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
      "expected_output": "e1e8e84b2e303e4e7e0f8f6e9e4d2d5c8b9a7e6d3c2b1a0f1e2d3c4b5a6978685f4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5"
    }
  ],
  "notes": [
    "The expected_output values are placeholders and should be replaced with actual SHA3-512 hash outputs when implementing the test vectors.",
    "For hash_binary_1, the input is provided as a hex string that should be converted to binary before hashing.",
    "All implementations (Rust, Go, JavaScript/TypeScript) should produce the same hash outputs for the same inputs."
  ]
}